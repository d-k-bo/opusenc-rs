searchState.loadedDescShard("opusenc_sys", 0, "Low-level bindings for libopusenc.\nNo value.\nNo value.\nNo value.\nCallback functions for accessing the stream.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nCallback for closing the stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalled for closing a stream. \\param user_data user-defined …\nAdd a comment. \\param[in,out] comments Where to add the …\nAdd a picture from a file. \\param[in,out] comments     …\nAdd a picture already in memory. \\param[in,out] comments   …\nAdd a comment as a single tag=value string. \\param[in,out] …\nCreate a deep copy of a comments object. \\param comments …\nCreate a new comments object. \\return Newly-created …\nDestroys a comments object. \\param comments Comments …\nEnds the stream and create a new stream within the same …\nEnds the stream and create a new file (callback-based). …\nEnds the stream and create a new file. \\param[in,out] enc …\nCreate a new OggOpus stream to be handled using callbacks …\nCreate a new OggOpus file. \\param path       Path where to …\nCreate a new OggOpus stream to be used along …\nSets encoder options. \\param[in,out] enc Encoder \\param …\nDeferred initialization of the encoder to force an …\nDeallocates the obect. Make sure to ope_drain() first. …\nFinalizes the stream, but does not deallocate the object. …\nWrite out the header now rather than wait for audio to …\nRead an encoder option.\nGet the next page from the stream (only if using …\nWrite an encoder option.\nAdd/encode any number of 16-bit linear samples to the …\nAdd/encode any number of float samples to the stream. …\nABI version for this header. Can be used to check for …\nReturns a string representing the version of libopusenc …\nCalled on every packet encoded (including header). \\param …\nConverts a libopusenc error code into a human readable …\nCalled for writing a page. \\param user_data user-defined …\nDecode an Opus packet. @param [in] st OpusDecoder*: …\nDecode an Opus packet with floating point output. @param […\nAllocates and initializes a decoder state. @param [in] Fs …\nPerform a CTL function on an Opus decoder.\nFrees an OpusDecoder allocated by opus_decoder_create(). …\nGets the number of samples of an Opus packet. @param [in] …\nGets the size of an OpusDecoder structure. @param [in] …\nInitializes a previously allocated decoder state. The …\nEncodes an Opus frame. @param [in] st OpusEncoder*: …\nEncodes an Opus frame from floating point input. @param [in…\nAllocates and initializes an encoder state. There are …\nPerform a CTL function on an Opus encoder.\nFrees an OpusEncoder allocated by opus_encoder_create(). …\nGets the size of an OpusEncoder structure. @param[in] …\nInitializes a previously allocated encoder state The …\nGets the libopus version string.\nPads a given Opus multi-stream packet to a larger size …\nRemove all padding from a given Opus multi-stream packet …\nGets the bandwidth of an Opus packet. @param [in] data char…\nGets the number of channels from an Opus packet. @param [in…\nGets the number of frames in an Opus packet. @param [in] …\nGets the number of samples of an Opus packet. @param [in] …\nGets the number of samples per frame from an Opus packet. …\nPads a given Opus packet to a larger size (possibly …\nParse an opus packet into one or more frames. Opus_decode …\nRemove all padding from a given Opus packet and rewrite …\nApplies soft-clipping to bring a float signal within the […\nAdd a packet to the current repacketizer state. This …\nAllocates memory and initializes the new repacketizer with …\nFrees an OpusRepacketizer allocated by …\nReturn the total number of frames contained in packet data …\nGets the size of an OpusRepacketizer structure. @returns …\n(Re)initializes a previously allocated repacketizer state. …\nConstruct a new packet from data previously submitted to …\nConstruct a new packet from data previously submitted to …\nConverts an opus error code into a human readable string.\nCallback for writing to the stream.")