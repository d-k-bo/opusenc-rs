searchState.loadedDescShard("opusenc", 0, "High-level bindings for libopusenc.\nThe collection name to which this track belongs\nArtist/performer\nThe artist generally considered responsible for the work. …\nBand/artist logotype\nCover (back)\nBand/Orchestra\nA bright colored fish\nComments to be attached to an Ogg Opus file.\nComposer\nConductor\nContact information for the creators or distributors of …\nCopyright attribution, e.g., ‘2001 Nobody’s Band’ or …\nDate the track was recorded\nA short text description of the contents\nDuring performance\nDuring recording\nEncoder for creating Ogg Opus files.\nContains the error value\nThe error type returned by all library functions.\n32x32 pixel ‘file icon’ (PNG only)\nCover (front)\nA short text indication of music genre\nIllustration\nThe provided string contains a nul byte.\nlibopusenc returned an invalid value for an option.\nISRC number for the track; see the ISRC intro page for …\nLead artist/lead performer/soloist\nLeaflet page\nLicense information, for example, ‘All Rights Reserved’…\nRecording location\nLocation where track was recorded\nLyricist/text writer\nDescribes wether the channels are mapped as mono, stereo …\nMedia (e.g., label side of a CD)\nContains the success value\nlibopusenc returned an error.\nError code as returned from libopusenc.\nName of the organization producing the track (i.e. the ‘…\nOther\nOther file icon\nThe artist(s) who performed the work. In classical music …\nCommon tags used by Musicbrainz Picard.\nType of an attached picture.\nPublisher/studio logotype\nTags recommended by the Ogg Vorbis specification.\nMovie/video screen capture\nTrack/Work name\nThe track number of this piece if part of a specific …\nThe version field may be used to differentiate multiple …\nABI version for libopusenc’s header. Can be used to …\nAdd a comment.\nAdd a picture from a file.\nAdd a picture already in memory.\nAdd a comment as a single tag=value string.\nEnds the stream and create a new stream within the same …\nEnds the stream and create a new file.\nCreate a new comments object.\nCreate a new OggOpus file.\nCreate a new OggOpus encoder in pull style.\nFinalizes the stream.\nWrite out the header now rather than wait for audio to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the next page from the stream\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a string representing the version of libopusenc …\nAdd/encode any number of 16-bit linear samples to the …\nAdd/encode any number of float samples to the stream.")